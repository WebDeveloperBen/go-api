// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user.queries.sql

package repository

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :exec
INSERT INTO users (fullname, email, email_verified, image, created_at, updated_at)
VALUES ($1, $2, $3, $4, now(), now())
`

type CreateUserParams struct {
	Fullname      string      `json:"fullname"`
	Email         string      `json:"email"`
	EmailVerified pgtype.Bool `json:"email_verified"`
	Image         pgtype.Text `json:"image"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.Exec(ctx, createUser,
		arg.Fullname,
		arg.Email,
		arg.EmailVerified,
		arg.Image,
	)
	return err
}

const deleteUser = `-- name: DeleteUser :execrows
DELETE FROM users 
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id uuid.UUID) (int64, error) {
	result, err := q.db.Exec(ctx, deleteUser, id)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const getAllUsers = `-- name: GetAllUsers :many
SELECT id, fullname, email, email_verified, image, created_at, updated_at 
FROM users 
ORDER BY created_at DESC
`

func (q *Queries) GetAllUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.Query(ctx, getAllUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Fullname,
			&i.Email,
			&i.EmailVerified,
			&i.Image,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUser = `-- name: GetUser :one
SELECT id, fullname, email, email_verified, image, created_at, updated_at 
FROM users 
WHERE id = $1
`

func (q *Queries) GetUser(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Fullname,
		&i.Email,
		&i.EmailVerified,
		&i.Image,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users 
SET fullname = $2, email = $3, email_verified = $4, image = $5, updated_at = now() 
WHERE id = $1
`

type UpdateUserParams struct {
	ID            uuid.UUID   `json:"id"`
	Fullname      string      `json:"fullname"`
	Email         string      `json:"email"`
	EmailVerified pgtype.Bool `json:"email_verified"`
	Image         pgtype.Text `json:"image"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.Exec(ctx, updateUser,
		arg.ID,
		arg.Fullname,
		arg.Email,
		arg.EmailVerified,
		arg.Image,
	)
	return err
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: presence.sql

package repository

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const deletePresence = `-- name: DeletePresence :exec
DELETE FROM presence
WHERE user_id = $1
`

func (q *Queries) DeletePresence(ctx context.Context, userID uuid.UUID) error {
	_, err := q.db.Exec(ctx, deletePresence, userID)
	return err
}

const getAllPresence = `-- name: GetAllPresence :many
SELECT user_id, last_status, last_login, last_logout
FROM presence
`

type GetAllPresenceRow struct {
	UserID     uuid.UUID  `json:"user_id"`
	LastStatus string     `json:"last_status"`
	LastLogin  *time.Time `json:"last_login"`
	LastLogout *time.Time `json:"last_logout"`
}

func (q *Queries) GetAllPresence(ctx context.Context) ([]GetAllPresenceRow, error) {
	rows, err := q.db.Query(ctx, getAllPresence)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllPresenceRow
	for rows.Next() {
		var i GetAllPresenceRow
		if err := rows.Scan(
			&i.UserID,
			&i.LastStatus,
			&i.LastLogin,
			&i.LastLogout,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPresenceByID = `-- name: GetPresenceByID :one
SELECT user_id, last_status, last_login, last_logout
FROM presence
WHERE user_id = $1
`

type GetPresenceByIDRow struct {
	UserID     uuid.UUID  `json:"user_id"`
	LastStatus string     `json:"last_status"`
	LastLogin  *time.Time `json:"last_login"`
	LastLogout *time.Time `json:"last_logout"`
}

func (q *Queries) GetPresenceByID(ctx context.Context, userID uuid.UUID) (GetPresenceByIDRow, error) {
	row := q.db.QueryRow(ctx, getPresenceByID, userID)
	var i GetPresenceByIDRow
	err := row.Scan(
		&i.UserID,
		&i.LastStatus,
		&i.LastLogin,
		&i.LastLogout,
	)
	return i, err
}

const insertPresence = `-- name: InsertPresence :exec
INSERT INTO presence (user_id, last_status, last_login, last_logout)
VALUES ($1, $2, $3, $4)
ON CONFLICT (user_id) DO UPDATE
SET last_status = EXCLUDED.last_status,
    last_login = EXCLUDED.last_login,
    last_logout = EXCLUDED.last_logout
`

type InsertPresenceParams struct {
	UserID     uuid.UUID  `json:"user_id"`
	LastStatus string     `json:"last_status"`
	LastLogin  *time.Time `json:"last_login"`
	LastLogout *time.Time `json:"last_logout"`
}

func (q *Queries) InsertPresence(ctx context.Context, arg InsertPresenceParams) error {
	_, err := q.db.Exec(ctx, insertPresence,
		arg.UserID,
		arg.LastStatus,
		arg.LastLogin,
		arg.LastLogout,
	)
	return err
}

const updateLogoutTime = `-- name: UpdateLogoutTime :exec
UPDATE presence
SET last_logout = $2
WHERE user_id = $1
`

type UpdateLogoutTimeParams struct {
	UserID     uuid.UUID  `json:"user_id"`
	LastLogout *time.Time `json:"last_logout"`
}

func (q *Queries) UpdateLogoutTime(ctx context.Context, arg UpdateLogoutTimeParams) error {
	_, err := q.db.Exec(ctx, updateLogoutTime, arg.UserID, arg.LastLogout)
	return err
}

const updatePresence = `-- name: UpdatePresence :exec
UPDATE presence
SET last_status = COALESCE($2, last_status),
    last_login  = COALESCE($3, last_login),
    last_logout = COALESCE($4, last_logout),
    updated_at  = now()
WHERE user_id = $1
`

type UpdatePresenceParams struct {
	UserID     uuid.UUID  `json:"user_id"`
	LastStatus string     `json:"last_status"`
	LastLogin  *time.Time `json:"last_login"`
	LastLogout *time.Time `json:"last_logout"`
}

func (q *Queries) UpdatePresence(ctx context.Context, arg UpdatePresenceParams) error {
	_, err := q.db.Exec(ctx, updatePresence,
		arg.UserID,
		arg.LastStatus,
		arg.LastLogin,
		arg.LastLogout,
	)
	return err
}
